□ ハンバーガメニュ
    ・準備
        ・viewportの設定
        （例）~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              <meta name = "viewport"
                    content = "width = device-width"
                    initial-scale = 1
                    maximum-scale = 1
                    minimum-scale = 1
                    user-scalable = no >
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
        ・マテリアルアイコン
            ・マテリアルアイコンのlinkを入手するためにmaterial icon guide の Icon fonts for the webのリンクタグをコピー
            ・htmlの方にlinkを貼り付ける
              <link href="https://fonts.googleapis.com/icon?family=Material+Icons"  rel="stylesheet">
            ・Material Icons Libraryから、使用したいアイコンを検索してコードを入手

        
    ・html cssを作成
        ・オープン時クローズ時の  html css をそれぞれ作成
            ・cursor: pointer;

            ・オープン側の表示設定など
            （例）~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                .open{
                    #ハンバーガ画像
                }

                .hide{
                  display: none;
                }
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



            ・クローズの方は表示したい場所に、固定設定、ポインター設定、透明設定をcssで作成する
            （例）~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                .overray {
                  position: fixed;
                  top: 0px;
                  pointer-events: none;
                  opacity: 1;
                  # アニメーションを付加するならここ
                  # 開始も終了も適応される
                  transition: .6s;
                }
                .show {
                  pointer-events: auto;
                  opacity: 0;
                }
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    ・JavaScript をそれぞれ作成
        ・（必要なら）scriptタグをhtmlファイルのbodyタグの終タグ直前に書き入れる
        ・それぞれのDOM操作を書き入れる
        （例）~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

            document.addEventlistener("turbolinks:load", function(){
              const open = document.getElementById("open");
              const overlay = document.querySelector(".overlay");
              open.addEventlistener("click", ()=>{
                  overlay.classList.add("show");
                  open.classList.add("hide");
              });

              const close = document.getElementById("close");
              close.addEventlistener("click", ()=>{
                  overlay.classList.remove("show");
                  open.classList.remove("hide");
              });
            });
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



□ カルーセル（自動スライド型）

    ・html
      （例）~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          <div class="pic-ctn">
            <img src="" alt="" class="pic">
            <img src="" alt="" class="pic">
            <img src="" alt="" class="pic">
            <img src="" alt="" class="pic">
            <img src="" alt="" class="pic">
          </div>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    
    ・CSS
      （例）~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            html, body {
              margin: 0;
              padding: 0;
            }

            .pic-ctn {
              width: 100vw;
              height: 200px;
            }

            @keyframes display {
              0% {
                transform: translateX(200px);
                opacity: 0;
              }
              10% {
                transform: translateX(0);
                opacity: 1;
              }
              20% {
                transform: translateX(0);
                opacity: 1;
              }
              30% {
                transform: translateX(-200px);
                opacity: 0;
              }
              100% {
                transform: translateX(-200px);
                opacity: 0;
              }
            }

            .pic-ctn {
              position: relative;
              width: 100vw;
              height: 300px;
              margin-top: 15vh;
            }

            .pic-ctn > img {
              position: absolute;
              top: 0;
              left: calc(50% - 100px);
              opacity: 0;
              animation: display 10s infinite;
            }

            img:nth-child(2) {
              animation-delay: 2s;
            }
            img:nth-child(3) {
              animation-delay: 4s;
            }
            img:nth-child(4) {
              animation-delay: 6s;
            }
            img:nth-child(5) {
              animation-delay: 8s;
            }

        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

□ モーダル ウィンドのmaskの掛け方
    （例）~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        #mask {
          background: rgba(0, 0, 0, 0.4);
          position: fixed;
          top: 0;
          bottom: 0;
          right: 0;
          left: 0;
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


□ カスタム属性の活用
  標準に搭載されているhtmlの属性（例えばclass,id,hrefなど）以外に独自で作成した属性のことをカスタム属性という。

  ・カスタム属性の利便性
    JavaScriptでDOM操作を行うときに共通のデータを持たせて操作しやすくするところ
  
  ・html内での定義方法
    data-カスタム属性名="値"
    （例）~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    <h1 id="electric-cars" data-index="12345">
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  ・JavaScript内での呼び出し
    dataset.カスタム属性名
    （例）~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      const article = document.getElementById('electric-cars');
      articles.dataset.index
      articleの中のカスタム属性の値を呼び出している（つまり12345）
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    このとき
      articles.dataset.index = 99999
    にすれば値は変化する


□ リンク先の部分へ飛ぶ変更
    href属性に id属性の値をつけた #id属性の値でそのid属性がついているタグに飛んでいく
    （例）href = "/#content"
□ 三角形の作成
    borderの特性を活かす
    （例）~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        .triangle{
          margin: 10px auto;
          width: 0;
          border-bottom: 50px solid darkred;
          border-right: 100px solid transparent;
          border-left: 100px solid transparent;
        }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
□ Chart.js

    ・準備
        ・アプリケーション内でのChart.jsのインストール
            yarn sdd chart.js
        ・JavaScriptファイルにRubyの変数を受け渡すためのgem gon を適応させる
            gem gon
        ・使用するpacks/applecation.jsファイルにchart.jsを組み込む
            require('chart.js')

    ・JavaScriptファイル内での記述
        ・javascript/packs/graph.jsのようにファイルを生成しておく
        ・packs/applecation.jsファイルに
        ・公式で使用できそうなサンプルがあるか探しておく
          （例）~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          document.appEventListener('turbolinks:load', ()=>{
              var ctx = document.getElementById('myChart').getContext('2d');
              var myChart = new Chart(ctx, {
                # 棒グラフの場合
                  type: 'bar',
                  data: {
                      labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
                      datasets: [{
                          label: '# of Votes',
                          data: [12, 19, 3, 5, 2, 3],
                          backgroundColor: [
                              'rgba(255, 99, 132, 0.2)',
                              'rgba(54, 162, 235, 0.2)',
                              'rgba(255, 206, 86, 0.2)',
                              'rgba(75, 192, 192, 0.2)',
                              'rgba(153, 102, 255, 0.2)',
                              'rgba(255, 159, 64, 0.2)'
                          ],
                          borderColor: [
                              'rgba(255, 99, 132, 1)',
                              'rgba(54, 162, 235, 1)',
                              'rgba(255, 206, 86, 1)',
                              'rgba(75, 192, 192, 1)',
                              'rgba(153, 102, 255, 1)',
                              'rgba(255, 159, 64, 1)'
                          ],
                          borderWidth: 1
                      }]
                  },
                  options: {
                      scales: {
                          yAxes: [{
                              ticks: {
                                  beginAtZero: true
                              }
                          }]
                      }
                  }
              });
          })
          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    ・ビューでの設定
        ・gonの読み取りの追加
            <% Gon::Base.render_data %>
        ・グラフを表示させたい場所にコードを追加
            <canvas id="line-chart" width="100%" height="100%"></canvas>

    ・コントローラ、モデルの設定
        ・JavaScriptに変数を渡すときは gon.変数名にすること
        （例）~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          Railsコントーラファイル内
          class GraphsController < ApplicationController
            def index
              gon.chart_label = Graph.pluck(:date)
              gon.chart_data = Graph.pluck(:weight)
              # null を nil にしないといけないので注意
              gon.chart_data = [60.3, 61.1, 60.8, nil, 60.5, 61.4]
            end
          end

          JavaScriptファイル内
          const lineLabel = gon.chart_label
          const lineData = gon.chart_data
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
□ Tweet共有
    基本形
        https://twitter.com/tweet?が基本形

    オプション
        基本形
        &オプション名=値

        オプション
            ・text
            ツイートの本文

            ・hashtags
            ハッシュタグの追加

        よく一緒に使うlink toのオプション
            ・image_tag
            （例）image_tag("フォルダの置いてあるパス")

            ・target="_blank"

    （例）~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        https://twitter.com/intent/tweet?text=Hello&hashtags=test
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


□ ファビコンの設定
    applicationファイル内に <%= favicon_link_tag "画像のURL"%>
    （例）<%= favicon_link_tag 'default.png' %>

□ スクロールしながらの固定
    基本
        display: sticky;
        top left right bottom のいずれか

    固定したいセレクターに display: sticky; を挿入しておくことで、そのセレクターが指定に指定した高さになったら固定される

    
□ 
□ 
□ 
□ 
□ 
□ 
□ 
□ 
□ 
□ 
□ 
□ 
□ 
□ 
