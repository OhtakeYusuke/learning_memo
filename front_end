□ ハンバーガメニュ
    ・準備
        ・viewportの設定
        （例）~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              <meta name = "viewport"
                    content = "width = device-width"
                    initial-scale = 1
                    maximum-scale = 1
                    minimum-scale = 1
                    user-scalable = no >
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
        ・マテリアルアイコン
            ・マテリアルアイコンのlinkを入手するためにmaterial icon guide の Icon fonts for the webのリンクタグをコピー
            ・htmlの方にlinkを貼り付ける
              <link href="https://fonts.googleapis.com/icon?family=Material+Icons"  rel="stylesheet">
            ・Material Icons Libraryから、使用したいアイコンを検索してコードを入手

        
    ・html cssを作成
        ・オープン時クローズ時の  html css をそれぞれ作成
            ・cursor: pointer;

            ・オープン側の表示設定など
            （例）~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                .open{
                    #ハンバーガ画像
                }

                .hide{
                  display: none;
                }
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



            ・クローズの方は表示したい場所に、固定設定、ポインター設定、透明設定をcssで作成する
            （例）~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                .overray {
                  position: fixed;
                  top: 0px;
                  pointer-events: none;
                  opacity: 1;
                  # アニメーションを付加するならここ
                  # 開始も終了も適応される
                  transition: .6s;
                }
                .show {
                  pointer-events: auto;
                  opacity: 0;
                }
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    ・JavaScript をそれぞれ作成
        ・（必要なら）scriptタグをhtmlファイルのbodyタグの終タグ直前に書き入れる
        ・それぞれのDOM操作を書き入れる
        （例）~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

            document.addEventlistener("turbolinks:load", function(){
              const open = document.getElementById("open");
              const overlay = document.querySelector(".overlay");
              open.addEventlistener("click", ()=>{
                  overlay.classList.add("show");
                  open.classList.add("hide");
              });

              const close = document.getElementById("close");
              close.addEventlistener("click", ()=>{
                  overlay.classList.remove("show");
                  open.classList.remove("hide");
              });
            });
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



□ カルーセル（自動スライド型）

    ・html
      （例）~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          <div class="pic-ctn">
            <img src="" alt="" class="pic">
            <img src="" alt="" class="pic">
            <img src="" alt="" class="pic">
            <img src="" alt="" class="pic">
            <img src="" alt="" class="pic">
          </div>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    
    ・CSS
      （例）~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            html, body {
              margin: 0;
              padding: 0;
            }

            .pic-ctn {
              width: 100vw;
              height: 200px;
            }

            @keyframes display {
              0% {
                transform: translateX(200px);
                opacity: 0;
              }
              10% {
                transform: translateX(0);
                opacity: 1;
              }
              20% {
                transform: translateX(0);
                opacity: 1;
              }
              30% {
                transform: translateX(-200px);
                opacity: 0;
              }
              100% {
                transform: translateX(-200px);
                opacity: 0;
              }
            }

            .pic-ctn {
              position: relative;
              width: 100vw;
              height: 300px;
              margin-top: 15vh;
            }

            .pic-ctn > img {
              position: absolute;
              top: 0;
              left: calc(50% - 100px);
              opacity: 0;
              animation: display 10s infinite;
            }

            img:nth-child(2) {
              animation-delay: 2s;
            }
            img:nth-child(3) {
              animation-delay: 4s;
            }
            img:nth-child(4) {
              animation-delay: 6s;
            }
            img:nth-child(5) {
              animation-delay: 8s;
            }

        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

□ モーダル ウィンドのmaskの掛け方
    （例）~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        #mask {
          background: rgba(0, 0, 0, 0.4);
          position: fixed;
          top: 0;
          bottom: 0;
          right: 0;
          left: 0;
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


□ カスタム属性の活用
  標準に搭載されているhtmlの属性（例えばclass,id,hrefなど）以外に独自で作成した属性のことをカスタム属性という。

  ・カスタム属性の利便性
    JavaScriptでDOM操作を行うときに共通のデータを持たせて操作しやすくするところ
  
  ・html内での定義方法
    data-カスタム属性名="値"
    （例）~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    <h1 id="electric-cars" data-index="12345">
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  ・JavaScript内での呼び出し
    dataset.カスタム属性名
    （例）~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      const article = document.getElementById('electric-cars');
      articles.dataset.index
      articleの中のカスタム属性の値を呼び出している（つまり12345）
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    このとき
      articles.dataset.index = 99999
    にすれば値は変化する


□ リンク先の部分へ飛ぶ変更
    href属性に id属性の値をつけた #id属性の値でそのid属性がついているタグに飛んでいく
    （例）href = "/#content"
□ 三角形の作成
    borderの特性を活かす
    （例）~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        .triangle{
          margin: 10px auto;
          width: 0;
          border-bottom: 50px solid darkred;
          border-right: 100px solid transparent;
          border-left: 100px solid transparent;
        }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
□
□
□
